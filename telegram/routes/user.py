from aiogram import Router, types, filters, html, F, enums
from telegram.middlewares.user import UserMiddleware
from db.models import User
from db import database
from telegram.routes.admin.mailing.sender import MailingTask
from telegram.keyboards.admin import keyboard_for_message
from utils.constants import LOGS
import asyncio
from datetime import datetime
import re

user_router = Router(name=__name__)
user_router.message.middleware(UserMiddleware())


class Dummy:
    pass


@user_router.message(filters.CommandStart(), F.chat.type == "private")
async def command_start_handler(message: types.Message, user: User) -> None:
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–í—Å–µ –ø—Ä–æ—Å—Ç–æ - –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–µ –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏, —è –º–æ–≥—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏, —è –Ω–µ —Ö—Ä–∞–Ω—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ, –Ω–∞–ø–∏—à–∏ <code>/sign [name]</code>\n"
        "–ß—Ç–æ–±—ã –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è - /stop_receiving\n"
        "–ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ /profile"
    )


@user_router.message(filters.Command("help"), F.chat.type == "private")
async def command_start_handler(message: types.Message, user: User) -> None:
    await message.answer(
        "/sign [–ø–æ–¥–ø–∏—Å—å] - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å\n"
        "/remove_sign - –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—å\n"
        "/profile - –Ω–µ –µ–±—É —á–µ —ç—Ç–æ\n"
        "/stop_receiving - –∑–∞–µ–±–∞–ª –±–æ—Ç\n"
        "/start_receiving - –Ω–µ –∑–∞–µ–±–∞–ª –±–æ—Ç\n"
    )


@user_router.message(filters.Command("sign"), F.chat.type == "private")
async def command_sign_handler(message: types.Message, user: User) -> None:
    try:
        signature = " ".join(message.text.split(" ")[1:])
    except:
        await message.answer(
            "–ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π <code>/signature [name]</code>, —á—Ç–æ–±—ã –µ–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        )
        return

    if signature == "admin" and user.role != "admin":
        await message.answer("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å—å. –°–æ—Å–∏ —Ö—É–π.")
        return

    database.update_sign(message.from_user.id, signature)
    await message.answer(
        f"–ü–æ–¥–ø–∏—Å—å {html.quote(signature)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–¥–∞–ª–∏—Ç—å - /remove_sign"
    )


@user_router.message(filters.Command("remove_sign"), F.chat.type == "private")
async def command_remove_signature_handler(message: types.Message) -> None:
    database.update_sign(message.from_user.id, "")
    await message.answer(f"–ü–æ–¥–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")


@user_router.message(filters.Command("profile"), F.chat.type == "private")
async def command_profile_handler(message: types.Message, user: User):
    profile = (
        "<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        "üÜî <b>ID:</b> <code>{}</code>\n"
        "‚õî <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> {}\n"
        "‚úâÔ∏è <b>–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {}\n"
        "üì© <b>–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {}\n"
        "üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {}\n"
        "‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {}\n"
        "‚úçÔ∏è <b>–ü–æ–¥–ø–∏—Å—å:</b> {}"
    ).format(
        user.id,
        "‚úÖ" if user.is_banned else "‚ùå",
        "‚úÖ" if user.is_receiving else "‚ùå",
        user.message_count,
        user.last_activity.strftime("%Y-%m-%d %H:%M:%S"),
        user.warn_count,
        html.quote(user.sign) if user.sign else "–ù–µ—Ç",
    )

    await message.reply(profile)


@user_router.message(filters.Command("stop_receiving"), F.chat.type == "private")
async def command_stop_receiving_handler(message: types.Message, user: User):
    database.update_user(user.telegram_id, is_receiving=False)
    await message.answer(
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞—á–∞—Ç—å - /start_receiving"
    )


@user_router.message(filters.Command("start_receiving"), F.chat.type == "private")
async def command_start_receiving_handler(message: types.Message, user: User):
    database.update_user(user.telegram_id, is_receiving=True)
    await message.answer("–í—ã —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")

@user_router.message(F.content_type == enums.ContentType.PINNED_MESSAGE)
async def pass_useless(message: types.Message, user: User):
    return

@user_router.message(F.chat.type == "private")
async def send_to_all_handler(message: types.Message, user: User):
    if user.role != "admin":
        if not user.is_receiving:
            await message.answer(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π."
            )
            return

        if user.is_banned:
            await message.answer(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã."
            )
            return

        if (datetime.now() - user.last_activity).total_seconds() < 5:
            await message.answer(
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥."
            )
            return

    database.increment_message_count(user.telegram_id)
    database.update_user(user.telegram_id, last_activity=datetime.now())

    prefix = (
        "–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}:\n".format(html.quote(user.sign if user.sign else ""))
        if user.sign
        else "–æ—Ç –∞–Ω–æ–Ω–∏–º–∞:\n"
    )

    if user.role == "admin" and user.sign == "admin":
        prefix = "–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"

    is_pinned = False
    if user.role == "admin" and message.text.startswith("pin"):
        is_pinned = True

    message = message.model_copy(
        update={
            "text": (prefix + message.text) if message.text else None,
            "caption": ((prefix + message.caption) if message.caption else None),
            "entities": (
                [
                    entity.model_copy(update={"offset": entity.offset + len(prefix)})
                    for entity in message.entities
                ]
                if message.entities
                else None
            ),
            "caption_entites": (
                [
                    entity.model_copy(update={"offset": entity.offset + len(prefix)})
                    for entity in message.caption_entities
                ]
                if message.caption_entities
                else None
            ),
        }
    )

    users = [user.telegram_id for user in database.get_users_for_echo()]
    if user.telegram_id in users and not message.poll:
        users.remove(user.telegram_id)
    if message.poll:
        users.remove(LOGS)
        dummy = Dummy()
        dummy.id = message.from_user.id
        om = message
        message = await message.send_copy(LOGS)
        await om.delete()
        message = message.model_copy(update={"from_user": dummy})

    task = MailingTask(message, users, True, is_pinned)
    asyncio.create_task(task.worker())

    admin_message = message.model_copy(
        update={
            "reply_markup": keyboard_for_message(user.id),
        }
    )
    if message.poll:
        admin_message = admin_message.model_copy(
            update={
                "poll": None,
                "text": "https://t.me/c/{}/{}".format(
                    str(message.chat.id).replace("-100", ""), message.message_id
                ),
            }
        )

    admin_task = MailingTask(
        admin_message,
        [user.telegram_id for user in database.get_admins()],
        is_notify=False,
        is_pinned=is_pinned
    )
    asyncio.create_task(admin_task.worker())
